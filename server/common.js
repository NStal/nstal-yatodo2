// Generated by CoffeeScript 1.6.2
(function() {
  var checkFolder, checkTodo, compareTodo, createId, selectNewer, sync, syncFolder, syncFolders, todoProperties, todoPropertiesAllowed, todoPropertiesNeed,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  todoProperties = ["name", "done", "description"];

  todoPropertiesNeed = ["name", "timestamp", "id"];

  todoPropertiesAllowed = ["name", "done", "description", "timestamp", "id"];

  createId = function() {
    return Date.now().toString() + Math.floor((Math.random() + 1) * 100000).toString();
  };

  compareTodo = function(a, b) {
    var prop, _i, _len;

    for (_i = 0, _len = todoProperties.length; _i < _len; _i++) {
      prop = todoProperties[_i];
      if (a[prop] !== b[prop]) {
        return false;
      }
    }
    return true;
  };

  selectNewer = function(a, b) {
    if (typeof a.timestamp !== "number") {
      a.timestamp = 0;
    }
    if (typeof b.timestamp !== "number") {
      b.timestamp = 0;
    }
    if (a.timestamp >= b.timestamp) {
      return a;
    }
    return b;
  };

  syncFolder = function(firstFolder, firstHistory, secondFolder, secondHistory) {
    var firstDelete, firstTodo, hasThisTodo, index, log, mask, results, secondDelete, secondTodo, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;

    if (firstFolder.name !== secondFolder.name) {
      throw new Error("Folder Name Not Match");
    }
    results = {
      name: firstFolder.name,
      todos: [],
      timestamp: Math.max(firstFolder.timestamp, secondFolder.timestamp)
    };
    mask = [];
    mask.length = secondFolder.todos.length;
    _ref = firstFolder.todos;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      firstTodo = _ref[_i];
      if (!firstTodo.id) {
        throw new Error("Todo Has No Id");
      }
      if (typeof firstTodo.timestamp !== "number" || isNaN(firstTodo.timestamp)) {
        throw new Error("Todo Has No Timestamp");
      }
      hasThisTodo = false;
      _ref1 = secondFolder.todos;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        secondTodo = _ref1[index];
        if (!secondTodo.id) {
          throw new Error("Todo Has No Id");
        }
        if (typeof secondTodo.timestamp !== "number" || isNaN(secondTodo.timestamp)) {
          throw new Error("Todo Has No Timestamp");
        }
        if (secondTodo.id === firstTodo.id) {
          mask[index] = true;
          hasThisTodo = true;
          if (compareTodo(firstTodo, secondTodo)) {
            results.todos.push(firstTodo);
          } else {
            results.todos.push(selectNewer(firstTodo, secondTodo));
          }
          break;
        }
      }
      if (!hasThisTodo) {
        secondDelete = false;
        for (_k = 0, _len2 = secondHistory.length; _k < _len2; _k++) {
          log = secondHistory[_k];
          if (log.todoId === firstTodo.id && log.action === "deleteTodo") {
            secondDelete = true;
            firstHistory.push(log);
            break;
          }
        }
        if (!secondDelete) {
          results.todos.push(firstTodo);
        }
      }
    }
    _ref2 = secondFolder.todos;
    for (index = _l = 0, _len3 = _ref2.length; _l < _len3; index = ++_l) {
      secondTodo = _ref2[index];
      if (mask[index]) {
        continue;
      }
      if (!secondTodo.id) {
        throw new Error("Todo Has No Id");
      }
      if (typeof secondTodo.timestamp !== "number" || isNaN(secondTodo.timestamp)) {
        throw new Error("Todo Has No Timestamp");
      }
      firstDelete = false;
      for (_m = 0, _len4 = firstHistory.length; _m < _len4; _m++) {
        log = firstHistory[_m];
        if (log.todoId === secondTodo.id && log.action === "deleteTodo") {
          secondHistory.push(log);
          firstDelete = true;
          break;
        }
      }
      if (!firstDelete) {
        results.todos.push(secondTodo);
      }
    }
    return results;
  };

  syncFolders = function(first, second) {
    var firstFolder, folder, folders, has, index, log, mask, result, secondFolder, solved, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;

    console.assert(second.folders instanceof Array);
    console.assert(first.folders instanceof Array);
    _ref = first.folders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      folder = _ref[_i];
      checkFolder(folder);
    }
    _ref1 = second.folders;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      folder = _ref1[_j];
      checkFolder(folder);
    }
    folders = [];
    mask = [];
    mask.length = second.folders.length;
    _ref2 = first.folders;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      firstFolder = _ref2[_k];
      has = false;
      _ref3 = second.folders;
      for (index = _l = 0, _len3 = _ref3.length; _l < _len3; index = ++_l) {
        secondFolder = _ref3[index];
        if (secondFolder.name === firstFolder.name) {
          mask[index] = true;
          has = true;
          result = syncFolder(firstFolder, first.history, secondFolder, second.history);
          checkFolder(result);
          folders.push(result);
          break;
        }
      }
      if (!has) {
        solved = false;
        _ref4 = second.history;
        for (index = _m = 0, _len4 = _ref4.length; _m < _len4; index = ++_m) {
          log = _ref4[index];
          if (log.action === "deleteFolder" && log.folderName === firstFolder.name) {
            if (log.timestamp > firstFolder.timestamp) {
              solved = true;
              first.history.push(log);
            } else {
              second.history.splice(index, 1);
            }
            break;
          }
        }
        if (!solved) {
          folders.push(firstFolder);
        }
      }
    }
    _ref5 = second.folders;
    for (index = _n = 0, _len5 = _ref5.length; _n < _len5; index = ++_n) {
      secondFolder = _ref5[index];
      if (mask[index]) {
        continue;
      }
      solved = false;
      _ref6 = first.history;
      for (index = _o = 0, _len6 = _ref6.length; _o < _len6; index = ++_o) {
        log = _ref6[index];
        if (log.action === "deleteFolder" && log.folderName === secondFolder.name) {
          if (log.timestamp > secondFolder.timestamp) {
            solved = true;
            second.history.push(log);
          } else {
            first.history.splice(index, 1);
          }
          break;
        }
      }
      if (!solved) {
        folders.push(secondFolder);
      }
    }
    return folders;
  };

  todoProperties;

  checkTodo = function(todo) {
    var prop, _i, _len;

    for (prop in todo) {
      if (__indexOf.call(todoPropertiesAllowed, prop) < 0) {
        console.error("Invalid Prop", prop);
        throw new Error("Broken Todo Message");
      }
    }
    for (_i = 0, _len = todoPropertiesNeed.length; _i < _len; _i++) {
      prop = todoPropertiesNeed[_i];
      if (todo[prop] === null || typeof todo[prop] === "undefined") {
        console.error("todo need prop:", prop);
        throw new Error("Broken Todo Message");
      }
    }
    return true;
  };

  checkFolder = function(folder) {
    var todo, _i, _len, _ref, _results;

    if (!(folder.todos instanceof Array)) {
      console.log(folder);
      console.error("Invalid Folder Todos");
      throw new Error("Invalid Folder Todos");
    }
    if (typeof folder.name !== "string") {
      console.error("Invalid Folder Name", folder.name);
      throw new Error("Invalid Folder Name");
    }
    if (typeof folder.timestamp !== "number") {
      throw new Error("Invalid Folder Timestamp");
    }
    _ref = folder.todos;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      todo = _ref[_i];
      _results.push(checkTodo(todo));
    }
    return _results;
  };

  sync = function(client, server) {
    var folder, folders, _i, _len, _ref;

    _ref = client.folders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      folder = _ref[_i];
      checkFolder(folder);
    }
    if (!server.lastSync) {
      server.lastSync = 0;
    }
    if (!client.lastSync) {
      client.lastSync = 0;
    }
    if (!client.lastUpdate) {
      client.lastUpdate = 0;
    }
    if (!server.lastUpdate) {
      server.lastUpdate = 0;
    }
    folders = [];
    if (client.lastSync === server.lastSync) {
      folders = syncFolders(client, server);
    } else if (client.lastSync > server.lastSync) {
      folders = syncFolders(client, server);
    } else if (client.lastSync < server.lastSync) {
      if (client.lastUpdate <= client.lastSync) {
        folders = syncFolders(server, client);
      } else {
        folders = syncFolders(server, client);
      }
    }
    client.folders = folders;
    server.folders = folders;
    client.lastSync = Date.now();
    server.lastSync = client.lastSync;
    client.lastUpdate = Math.max(server.lastUpdate, client.lastUpdate);
    server.lastUpdate = client.lastUpdate;
    return true;
  };

  exports.syncFolders = syncFolders;

  exports.sync = sync;

  exports.syncFolder = syncFolder;

  exports.createId = createId;

}).call(this);

/*
//@ sourceMappingURL=common.map
*/
