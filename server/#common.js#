// Generated by CoffeeScript 1.4.0
(function() {
  var compareTodo, createId, selectNewer, syncFolder;

  createId = function() {
    return Date.now().toString() + Math.floor((Math.random() + 1) * 100000).toString();
  };

  compareTodo = function(a, b) {
    var prop, todoProperties, _i, _len;
    todoProperties = ["name", "done", "description"];
    for (_i = 0, _len = todoProperties.length; _i < _len; _i++) {
      prop = todoProperties[_i];
      if (a[prop] !== b[prop]) {
        return false;
      }
    }
    return true;
  };

  selectNewer = function(a, b) {
    if (typeof a.timestamp !== "number") {
      a.timestamp = 0;
    }
    if (typeof b.timestamp !== "number") {
      b.timestamp = 0;
    }
    if (a.timestamp >= b.timestamp) {
      return a;
    }
    return b;
  };

  syncFolder = function(clientFolder, clientHistory, serverFolder, serverHistory) {
    var clientDelete, clientTodo, hasThisTodo, index, log, mask, results, serverDelete, serverTodo, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
    if (clientFolder.name !== serverFolder.name) {
      throw new Error("Folder Name Not Match");
    }
    results = {
      name: clientFolder.name,
      todos: []
    };
    mask = [];
    mask.length = serverFolder.todos.length;
    _ref = clientFolder.todos;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      clientTodo = _ref[_i];
      if (!clientTodo.id) {
        throw new Error("Client Todo Has No Id");
      }
      if (typeof clientTodo.timestamp !== "number" || isNaN(clientTodo.timestamp)) {
        throw new Error("Client Todo Has No Timestamp");
      }
      hasThisTodo = false;
      _ref1 = serverFolder.todos;
      for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
        serverTodo = _ref1[index];
        if (serverTodo.id === clientTodo.id) {
          mask[index] = true;
          hasThisTodo = true;
          if (compareTodo(clientTodo, serverTodo)) {
            results.todos.push(clientTodo);
          } else {
            results.todos.push(selectNewer(clientTodo, serverTodo));
          }
          break;
        }
      }
      if (!hasThisTodo) {
        serverDelete = false;
        for (_k = 0, _len2 = serverHistory.length; _k < _len2; _k++) {
          log = serverHistory[_k];
          if (log.todoId === clientTodo.id && log.action === "deleteTodo") {
            serverDelete = true;
            clientHistory.push(log);
            break;
          }
        }
        if (!serverDelete) {
          results.todos.push(clientTodo);
        }
      }
    }
    _ref2 = serverFolder.todos;
    for (index = _l = 0, _len3 = _ref2.length; _l < _len3; index = ++_l) {
      serverTodo = _ref2[index];
      if (mask[index]) {
        continue;
      }
      clientDelete = false;
      for (_m = 0, _len4 = clientHistory.length; _m < _len4; _m++) {
        log = clientHistory[_m];
        if (log.todoId === serverTodo.id && log.action === "deleteTodo") {
          serverHistory.push(log);
          clientDelete = true;
          break;
        }
      }
      if (!clientDelete) {
        results.push(serverTodo);
      }
    }
    return results;
  };

  exports.syncFolder = syncFolder;

  exports.createId = createId;

}).call(this);
