// Generated by CoffeeScript 1.6.2
(function() {
  var Collections, Error, MongoStore, ObjectID, app, async, childProcess, common, crypto, db, delayTime, express, mongodb, path, settings, simulateDelay;

  require("coffee-script");

  express = require("express");

  async = require("async");

  mongodb = require("mongodb");

  crypto = require("crypto");

  path = require("path");

  db = require("./db.coffee");

  Collections = db.Collections;

  MongoStore = require("connect-mongo")(express);

  Error = (require("./error")).Error;

  settings = (require("./settings")).settings;

  ObjectID = (require("mongodb")).ObjectID;

  childProcess = require("child_process");

  simulateDelay = process.argv[2] === "delay";

  delayTime = 500;

  common = require("./common");

  if (simulateDelay) {
    console.log("use delay mode of %d ms", delayTime);
  }

  app = express();

  app.enable("trust proxy");

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.session({
    secret: settings.sessionSecret,
    key: "mikupantsu",
    store: new MongoStore({
      db: settings.database.name
    })
  }));

  app.use(function(req, res, next) {
    if (!db.DatabaseReady) {
      res.status(503);
      res.json({
        "error": "Server Not Ready"
      });
      return;
    }
    return next();
  });

  app.use(function(req, res, next) {
    res.json = function(obj) {
      if (!res.responseContentType) {
        res.setHeader("Content-Type", "text/json");
      } else {
        res.setHeader("Content-Type", res.responseContentType);
      }
      if (simulateDelay) {
        setTimeout((function() {
          return res.end(JSON.stringify(obj));
        }), delayTime);
        return;
      }
      return res.end(JSON.stringify(obj));
    };
    res.success = function(obj) {
      return res.json({
        state: true,
        data: obj
      });
    };
    res.jsonError = function(description, errorCode, subCode) {
      return this.json({
        state: false,
        error: description,
        errorCode: errorCode,
        subCode: subCode
      });
    };
    res.serverError = function() {
      return res.jsonError("Server Error", Error.ServerError);
    };
    return next();
  });

  app.post("/api/signup", function(req, res) {
    var date, email, hash, password, username;

    username = req.param("username", null);
    password = req.param("password", "");
    email = req.param("email", void 0);
    console.log(username, password, email);
    date = new Date();
    if (!username) {
      res.jsonError("Invalid Username", Error.InvalidParameter);
      return;
    }
    if (!/^[a-z0-9_]{3,64}$/i.test(username)) {
      res.jsonError("Invalid Username", Error.InvalidParameter);
      return;
    }
    hash = crypto.createHash("sha1").update(password + date.getTime()).digest("hex");
    return Collections.user.find({
      username: username
    }, function(err, cursor) {
      if (err || !cursor) {
        res.jsonError("Server Error");
        return;
      }
      return cursor.toArray(function(err, results) {
        if (err) {
          res.jsonError("Server Error");
          return;
        }
        if (results.length > 0) {
          res.jsonError("Username Exists", Error.AlreadyExists);
          return;
        }
        Collections.user.insert({
          username: username,
          password: hash,
          date: date,
          archiveCount: 0
        });
        req.session.username = username;
        req.session.trust = true;
        req.session.maxAge = settings.defaultExpire;
        res.success();
      });
    });
  });

  app.post("/api/signin", function(req, res) {
    var password, username;

    username = req.param("username", null);
    password = req.param("password", "");
    if (!username) {
      res.jsonError("Invalid Parameter", Error.InvalidParameter);
      return;
    }
    return Collections.user.findOne({
      username: username
    }, function(err, doc) {
      var salt;

      if (err) {
        res.serverError();
        return;
      }
      if (!doc) {
        res.jsonError("Authorization Failed", Error.AuthorizationFailed);
        return;
      }
      salt = doc.dateString || doc.date.getTime();
      if (crypto.createHash("sha1").update(password + salt).digest("hex").toString() !== doc.password) {
        res.jsonError("Authorization Failed", Error.AuthorizationFailed);
        return;
      }
      req.session.username = username;
      req.session.trust = true;
      req.session.maxAge = settings.defaultExpire;
      res.success();
    });
  });

  app.post("/api/:apiname", function(req, res, next) {
    if (req.session.trust && req.session.username) {
      next();
      return;
    }
    res.jsonError("Authorization Failed", Error.AuthorizationFailed);
  });

  app.post("/api/signout", function(req, res) {
    if (req.session.username && req.session.trust) {
      req.session.destroy();
      return res.json({
        state: true
      });
    } else {
      return res.serverError();
    }
  });

  app.post("/api/getProfile", function(req, res, next) {
    if (!req.session.username) {
      console.error("Should'nt reach here");
      console.error("Request Information", req);
      console.trace();
      return;
    }
    return Collections.user.findOne({
      username: req.session.username
    }, function(err, user) {
      var profile;

      if (err) {
        console.error("Server Error", err);
        res.serverError();
        return;
      }
      if (!user) {
        console.error("Should'nt reach here");
        console.error("Request Information");
        console.trace();
        return;
      }
      profile = {
        username: user.username,
        email: user.email,
        archiveCount: user.archiveCount
      };
      return res.success(profile);
    });
  });

  app.post("/api/updateEmail", function(req, res, next) {
    var email, username;

    username = req.session.username;
    email = req.param("email", "");
    if (!/[a-z0-9.]+@[a-z0-9.]+/.test(email) && email.length > 0) {
      res.jsonError("Invalid Parameter", Error.InvalidParameter);
      return;
    }
    return Collections.user.findOne({
      username: username
    }, function(err, user) {
      if (err) {
        console.error("Server Error", err);
        res.serverError();
        return;
      }
      if (!user) {
        console.error("User Not Found", "username%s", username);
        console.error("Should'nt reach here");
        return;
      }
      user.email = email;
      Collections.user.update({
        username: username
      }, {
        $set: {
          email: email
        }
      });
      return res.success();
    });
  });

  app.post("/api/updatePassword", function(req, res, next) {
    var newPassword, password, username;

    username = req.session.username;
    password = req.param("password", "");
    newPassword = req.param("newPassword", null);
    if (!newPassword) {
      res.jsonError("Invalid Parameter", Error.InvalidParameter);
      return;
    }
    if (!username) {
      console.error("Should'nt reach here");
      res.serverError();
      return;
    }
    return Collections.user.findOne({
      username: username
    }, function(err, user) {
      var hash, salt;

      if (err) {
        console.error("Server Error", err);
        res.serverError();
        return;
      }
      if (!user) {
        console.error("User Not Found", username);
        res.serverError();
        return;
      }
      salt = user.date.getTime();
      hash = crypto.createHash("sha1").update(password + salt).digest("hex");
      if (hash !== user.password) {
        res.jsonError("Authorization Failed", Error.AuthorizationFailed);
        return;
      }
      user.password = crypto.createHash("sha1").update(newPassword + user.date.getTime()).digest("hex");
      delete user.dateString;
      Collections.user.update({
        username: username
      }, user);
      req.session.destroy();
      return res.success();
    });
  });

  app.post("/api/sync", function(req, res, next) {
    var client, data, e, lastSync, lastUpdate;

    if (!req.session.username) {
      console.error("Should'nt reach here");
      console.error("Request Information", req);
      console.trace();
      return;
    }
    try {
      data = JSON.parse(req.param("data"));
      lastSync = parseInt(req.param("lastSync", 0)) || 0;
      lastUpdate = parseInt(req.param("lastUpdate", 0)) || 0;
    } catch (_error) {
      e = _error;
      console.error("invalid data", req.param("data"));
      res.jsonError("Invalid Parameter", Error.InvalidParameter);
    }
    client = {
      folders: data.folders || [],
      history: data.history || [],
      lastSync: lastSync,
      lastUpdate: lastUpdate
    };
    return Collections.user.findOne({
      username: req.session.username
    }, function(err, user) {
      var server, todo;

      if (err || !user) {
        console.error("Server Error", err);
        res.serverError();
        return;
      }
      todo = user.todo || {};
      server = {
        folders: todo.folders || [],
        history: todo.history || [],
        lastSync: todo.lastSync || 0,
        lastUpdate: todo.lastUpdate || 0
      };
      console.log(client, server);
      client.folders = client.folders.filter(function(item) {
        return item;
      });
      server.folders = server.folders.filter(function(item) {
        return item;
      });
      try {
        common.sync(client, server);
      } catch (_error) {
        e = _error;
        console.error(e);
        res.jsonError("Invalid Parameter", Error.InvalidParameter);
        return;
      }
      res.success(client);
      return Collections.user.update({
        username: user.username
      }, {
        $set: {
          todo: server
        }
      });
    });
  });

  app.post("/api/getProfile", function(req, res, next) {
    if (!req.session.username) {
      console.error("Should'nt reach here");
      console.error("Request Information", req);
      console.trace();
      return;
    }
    return Collections.user.findOne({
      username: req.session.username
    }, function(err, user) {
      var profile;

      if (err) {
        console.error("Server Error", err);
        res.jsonError("Server Error", Error.ServerError);
        return;
      }
      if (!user) {
        console.error("Should'nt reach here");
        console.error("Request Information");
        console.trace();
        return;
      }
      profile = {
        username: user.username,
        email: user.email,
        archiveCount: user.archiveCount
      };
      return res.success(profile);
    });
  });

  app.all("/api/:apiname", function(req, res, next) {
    res.status(404);
    return res.jsonError("Api Not Found", Error.NotFound);
  });

  app.listen(14086);

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
