// Generated by CoffeeScript 1.6.2
(function() {
  var FocusList, FocusListItem, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FocusList = (function(_super) {
    __extends(FocusList, _super);

    function FocusList(template) {
      FocusList.__super__.constructor.call(this, template);
      this.items = [];
    }

    FocusList.prototype.addItem = function(item) {
      this.bindItem(item);
      return this.appendItem(item);
    };

    FocusList.prototype.bindItem = function(item) {
      var _this = this;

      item.on("focus", function() {
        var todo, _i, _len, _ref, _results;

        _this.currentFocusItem = item;
        _ref = _this.items;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          todo = _ref[_i];
          if (todo !== item) {
            _results.push(todo.unfocus());
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return this.emit("focus", item);
    };

    FocusList.prototype.appendItem = function(item) {
      this.items.push(item);
      return item.appendTo(this.node);
    };

    FocusList.prototype.removeItem = function(item) {
      var pos;

      pos = this.items.indexOf(item);
      if (pos >= 0) {
        this.items.splice(pos, 1);
        item.remove();
        return item;
      }
      return null;
    };

    FocusList.prototype.indexOfItem = function(item) {
      return this.items.indexOf(item);
    };

    FocusList.prototype.nextItem = function(item) {
      var index;

      index = this.items.indexOf(item);
      if (index < 0) {
        return null;
      }
      if (index >= 0) {
        if (this.items[index + 1]) {
          return this.items[index + 1];
        } else {
          return this.items[0];
        }
      } else {
        return null;
      }
    };

    FocusList.prototype.previousItem = function(item) {
      var index;

      index = this.items.indexOf(item);
      if (index < 0) {
        return null;
      }
      if (index >= 1) {
        return this.items[index - 1];
      } else {
        return this.items[this.items.length - 1];
      }
    };

    FocusList.prototype.insertItem = function(item, index) {
      if (index < 0) {
        index = 0;
      }
      if (index < this.items.length) {
        item.before(this.items[index]);
        this.items.splice(index, 0, item);
      } else if (this.items.length - 1 >= 0) {
        item.after(this.items[this.items.length - 1]);
        this.items.push(item);
      } else {
        item.appendTo(this.node);
        this.items.push(item);
      }
      return item;
    };

    return FocusList;

  })(Leaf.Widget);

  FocusListItem = (function(_super) {
    __extends(FocusListItem, _super);

    function FocusListItem() {
      _ref = FocusListItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    FocusListItem.prototype.focus = function() {
      if (this.isFocus) {
        return false;
      }
      this.isFocus = true;
      this.emit("focus");
      this.node$.addClass("focus");
      return true;
    };

    FocusListItem.prototype.unfocus = function() {
      if (!this.isFocus) {
        return false;
      }
      this.isFocus = false;
      this.emit("unfocus");
      this.node$.removeClass("focus");
      return true;
    };

    return FocusListItem;

  })(Leaf.Widget);

  window.FocusListItem = FocusListItem;

  window.FocusList = FocusList;

}).call(this);

/*
//@ sourceMappingURL=focusList.map
*/
