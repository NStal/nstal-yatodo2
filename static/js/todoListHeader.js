// Generated by CoffeeScript 1.6.2
(function() {
  var FolderListItem, TodoListHeader,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TodoListHeader = (function(_super) {
    __extends(TodoListHeader, _super);

    function TodoListHeader() {
      var _this = this;

      TodoListHeader.__super__.constructor.call(this, App.templates["todo-list-header"]);
      this.km = new Leaf.KeyEventManager();
      this.km.attachTo(window);
      this.km.on("keydown", function(e) {
        var alphabet;

        if (e.which === Leaf.Key.escape) {
          _this.hideFolderList();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.up && e.ctrlKey) {
          _this.hideFolderList();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.up) {
          _this.previousFolder();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.down) {
          _this.nextFolder();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.enter) {
          if (_this.isEdit) {
            _this.createFolderByCurrentEdit();
          } else {
            _this.hideFolderList();
          }
          e.capture();
          return;
        }
        if (e.which >= Leaf.Key.a && e.which <= Leaf.Key.z && !_this.isEdit) {
          console.log(_this.isEdit);
          alphabet = "abcdefghijklmnopqrstuvwxyz";
          _this.handleCharactorNavigate(alphabet[e.which - Leaf.Key.a]);
          e.capture();
        }
      });
    }

    TodoListHeader.prototype.handleCharactorNavigate = function(char) {
      var item, pinyin, _i, _j, _len, _len1, _ref, _ref1;

      this.lastParseFolderName = this.lastParseFolderName || null;
      this.lastNavigationString = this.lastNavigationString && this.lastNavigationString + char || char;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        pinyin = Pinyin.toPinyin(item.folder.name).toLowerCase();
        console.log(this.lastNavigationString);
        if (pinyin.indexOf(this.lastNavigationString) === 0) {
          item.focus();
          this.goto(item.folder);
          return;
        }
      }
      this.lastNavigationString = char;
      _ref1 = this.items;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        pinyin = Pinyin.toPinyin(item.folder.name).toLowerCase();
        console.log(this.lastNavigationString);
        if (pinyin.indexOf(this.lastNavigationString) === 0) {
          item.focus();
          this.goto(item.folder);
          return;
        }
      }
    };

    TodoListHeader.prototype.set = function(folders) {
      var item, _i, _j, _len, _len1, _ref, _ref1, _results;

      console.assert(folders instanceof Array);
      this.folders = folders;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.remove();
      }
      this.items.length = 0;
      _ref1 = this.folders;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        item = new FolderListItem(item);
        this.bindItem(item);
        this.appendItem(item);
        _results.push(item.appendTo(this.UI.folderList));
      }
      return _results;
    };

    TodoListHeader.prototype.bindItem = function(item) {
      var _this = this;

      TodoListHeader.__super__.bindItem.call(this, item);
      return item.onClickNode = function() {
        _this.hideFolderList();
        return _this.goto(item);
      };
    };

    TodoListHeader.prototype.gotoFirstFolder = function() {
      if (this.folders.length) {
        return this.goto(this.folders[0]);
      }
    };

    TodoListHeader.prototype.goto = function(targetFolder) {
      var folder, _i, _len, _ref;

      if (!targetFolder && this.items[0]) {
        targetFolder = this.items[0].folder;
      }
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        folder = _ref[_i];
        if (folder.name === targetFolder.name) {
          this.UI.folderName$.text(folder.name);
          this.emit("goto", folder.folder);
          folder.focus();
          return folder;
        }
      }
      throw new Error("goto folder not exists");
      return null;
    };

    TodoListHeader.prototype.startEditCreateFolder = function() {
      if (this.isEdit) {
        return;
      }
      this.isEdit = true;
      this.UI.createText$.hide();
      this.UI.folderNameInput$.show();
      return this.UI.folderNameInput$.focus();
    };

    TodoListHeader.prototype.endEditCreateFolder = function() {
      if (!this.isEdit) {
        return;
      }
      this.isEdit = false;
      this.UI.createText$.show();
      this.UI.folderNameInput$.blur();
      return this.UI.folderNameInput$.hide();
    };

    TodoListHeader.prototype.nextFolder = function() {
      var item;

      item = this.nextItem(this.currentFocusItem);
      if (item) {
        item.focus();
        return this.goto(item);
      }
    };

    TodoListHeader.prototype.previousFolder = function() {
      var item;

      item = this.previousItem(this.currentFocusItem);
      if (item) {
        item.focus();
        return this.goto(item);
      }
    };

    TodoListHeader.prototype.showFolderList = function() {
      if (this.isShown) {
        return;
      }
      this.isShown = true;
      this.km.master();
      return this.UI.folderList$.show();
    };

    TodoListHeader.prototype.hideFolderList = function() {
      if (!this.isShown) {
        return;
      }
      this.isShown = false;
      this.km.unmaster();
      this.UI.folderList$.hide();
      return this.endEditCreateFolder();
    };

    TodoListHeader.prototype.createFolderByCurrentEdit = function() {
      var folder, folderName;

      folderName = this.UI.folderNameInput$.val().trim();
      folder = {
        name: folderName,
        timestamp: Date.now(),
        todos: []
      };
      this.emit("createFolder", folder);
      return this.endEditCreateFolder();
    };

    TodoListHeader.prototype.onClickNextFolderButton = function() {
      return this.nextFolder();
    };

    TodoListHeader.prototype.onClickPreviousFolderButton = function() {
      return this.previousFolder();
    };

    TodoListHeader.prototype.onClickFolderName = function() {
      if (this.isShown) {
        return this.hideFolderList();
      } else {
        return this.showFolderList();
      }
    };

    TodoListHeader.prototype.onClickCreateText = function() {
      return this.startEditCreateFolder();
    };

    return TodoListHeader;

  })(FocusList);

  FolderListItem = (function(_super) {
    __extends(FolderListItem, _super);

    function FolderListItem(data) {
      FolderListItem.__super__.constructor.call(this, App.templates["folder-list-item"]);
      this.name = data.name;
      this.folder = data;
      this.node$.text(data.name);
    }

    return FolderListItem;

  })(FocusListItem);

  window.TodoListHeader = TodoListHeader;

}).call(this);

/*
//@ sourceMappingURL=todoListHeader.map
*/
