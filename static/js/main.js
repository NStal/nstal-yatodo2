// Generated by CoffeeScript 1.6.2
(function() {
  var ActionBar, DefaultData, FadeBox, TodoList, TodoListItem, Yatodo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  window.App = window;

  window.Plugins = [];

  $(function() {
    var templateManager;

    templateManager = new Leaf.TemplateManager();
    templateManager.use("todo-list-item", "todo-list", "action-bar", "todo-list-header", "folder-list-item", "hint", "hint-box", "signup-box", "signin-box", "message-box", "help-box", "custom-scroller");
    templateManager.on("ready", function(templates) {
      App.templates = templates;
      App.userInfoManager = new UserInfoManager();
      App.dataManager = new DataManager();
      App.yatodo = new Yatodo();
      return App.yatodo.init();
    });
    return templateManager.start();
  });

  DefaultData = [
    {
      name: "FolderA",
      todos: [
        {
          name: "A:My Todo"
        }, {
          name: "A:My Todo2"
        }
      ]
    }, {
      name: "FolderB",
      todos: [
        {
          name: "B:My Todo"
        }, {
          name: "B:My Todo2"
        }
      ]
    }
  ];

  Yatodo = (function(_super) {
    __extends(Yatodo, _super);

    function Yatodo() {
      var _this = this;

      this.todoList = new TodoList();
      this.todoListHeader = new TodoListHeader();
      this.actionBar = new ActionBar();
      this.hintBox = new HintBox();
      this.signupBox = new SignupBox();
      this.signinBox = new SigninBox();
      this.helpBox = new HelpBox();
      this.todoListHeader.on("goto", function(folder) {
        if (_this.todoList.currentFocusItem && _this.todoList.currentFocusItem.isEdit) {
          _this.todoList.currentFocusItem.endEdit();
        }
        return _this.todoList.set(folder);
      });
      this.todoListHeader.on("createFolder", function(folder) {
        if (!App.dataManager.createFolder(folder)) {
          return;
        }
        return _this.todoListHeader.set(App.dataManager.data.folders);
      });
      this.todoListHeader.set(App.dataManager.data.folders);
      this.todoListHeader.goto();
      Yatodo.__super__.constructor.call(this, "#yatodo");
      this.initHotkey();
      this.todoList.on("change", function(type, object) {
        console.log("change!", type, object);
        App.dataManager.setFolderData(_this.todoList.toData());
        if (type === "delete") {
          return App.dataManager.addHistory({
            action: "deleteTodo",
            todoId: object.data.id
          });
        }
      });
      App.dataManager.on("synced", function() {
        var folder, item, _i, _len, _ref;

        folder = App.dataManager.getFolder(_this.todoList.data);
        _this.todoListHeader.set(App.dataManager.data.folders);
        if (!Leaf.Util.compare(_this.todoList.data, folder)) {
          console.log(_this.todoList.data, folder, "!!!");
          return _this.todoListHeader.goto(folder);
        } else {
          _ref = _this.todoListHeader.items;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            if (item.folder.name === folder.name) {
              item.focus();
              return;
            }
          }
        }
      });
    }

    Yatodo.prototype.loadPlugins = function() {
      var plugin, _i, _len, _ref, _results;

      _ref = window.Plugins;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        plugin = _ref[_i];
        _results.push(plugin.load());
      }
      return _results;
    };

    Yatodo.prototype.init = function() {
      var _this = this;

      this.loadPlugins();
      App.userInfoManager.on("signin", function() {
        _this.signupBox.hide();
        _this.signinBox.hide();
        return _this.hint(Language.welcomeAboard);
      });
      App.userInfoManager.on("failToSignin", function() {
        return _this.hint(Language.wrongUsernameOrPassword);
      });
      return this.emit("ready");
    };

    Yatodo.prototype.hint = function(str) {
      return this.hintBox.show(str);
    };

    Yatodo.prototype.warn = function(str) {
      return this.hintBox.show(str, "Error");
    };

    Yatodo.prototype.suggestSignin = function() {
      if (!this.alreadySuggest) {
        this.requireSignin();
        return this.alreadySuggest = true;
      }
    };

    Yatodo.prototype.requireSignin = function() {
      return this.signinBox.show();
    };

    Yatodo.prototype.fullScreen = function() {
      this.node$.addClass("full-screen");
      return this.isFullScreen = true;
    };

    Yatodo.prototype.halfScreen = function() {
      this.node$.removeClass("full-screen");
      return this.isFullScreen = false;
    };

    Yatodo.prototype.deleteCurrentFolder = function() {
      if (this.todoList.data.todos.length === 0 || confirm(Language.confirmDeleteFolder)) {
        if (App.dataManager.deleteFolder(this.todoList.data)) {
          this.todoListHeader.set(App.dataManager.data.folders);
          return this.todoListHeader.gotoFirstFolder();
        }
      }
    };

    Yatodo.prototype.initHotkey = function() {
      var _this = this;

      this.km = new Leaf.KeyEventManager();
      this.km.attachTo(window);
      this.km.master();
      return this.km.on("keydown", function(e) {
        var next, prev;

        if (e.which === Leaf.Key.h && e.altKey) {
          _this.helpBox.show();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.right && e.ctrlKey) {
          _this.todoListHeader.nextFolder();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.left && e.ctrlKey) {
          _this.todoListHeader.previousFolder();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.down && e.ctrlKey) {
          _this.todoListHeader.showFolderList();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.enter && e.ctrlKey && e.altKey) {
          _this.todoList.createNewItemBelow();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.enter && e.ctrlKey) {
          _this.todoList.createNewItem();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.up && e.altKey) {
          _this.todoList.moveFocusToPrevious();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.down && e.altKey) {
          _this.todoList.moveFocusToNext();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.enter) {
          if (_this.todoList.currentFocusItem) {
            _this.todoList.currentFocusItem.startEdit();
          }
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.down || e.which === Leaf.Key.k) {
          next = _this.todoList.nextItem(_this.todoList.currentFocusItem);
          e.capture();
          if (next) {
            console.log("has Next");
            next.focus();
          }
          return;
        }
        if (e.which === Leaf.Key.up || e.which === Leaf.Key.j) {
          prev = _this.todoList.previousItem(_this.todoList.currentFocusItem);
          if (prev) {
            prev.focus();
          }
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.space) {
          if (_this.todoList.currentFocusItem.isEdit) {
            return;
          }
          _this.todoList.toggleCurrentFocus();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.del && e.ctrlKey) {
          _this.deleteCurrentFolder();
          e.capture();
        }
        if (e.which === Leaf.Key.backspace && e.ctrlKey) {
          if (_this.todoList.currentFocusItem && _this.todoList.currentFocusItem.isEdit) {
            return;
          }
          _this.todoList.deleteFocus();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.s && e.altKey) {
          App.dataManager.remoteSync();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.r && e.altKey) {
          _this.todoList.deleteDone();
          e.capture();
          return;
        }
        if (e.which === Leaf.Key.c && e.altKey) {
          _this.todoList.moveDoneToBottom();
          e.capture();
        }
      });
    };

    return Yatodo;

  })(Leaf.Widget);

  ActionBar = (function(_super) {
    __extends(ActionBar, _super);

    function ActionBar() {
      var _this = this;

      ActionBar.__super__.constructor.call(this, App.templates["action-bar"]);
      App.dataManager.on("syncStart", function() {
        return _this.UI.syncButton$.addClass("icon-spin");
      });
      App.dataManager.on("syncEnd", function() {
        return _this.UI.syncButton$.removeClass("icon-spin");
      });
    }

    ActionBar.prototype.onClickSyncButton = function() {
      return App.dataManager.remoteSync();
    };

    ActionBar.prototype.onClickCreateTodoButton = function() {
      return App.yatodo.todoList.createNewItem();
    };

    ActionBar.prototype.onClickResizeButton = function() {
      if (App.yatodo.isFullScreen) {
        App.yatodo.halfScreen();
      } else {
        App.yatodo.fullScreen();
      }
      return App.yatodo.todoList.resize();
    };

    ActionBar.prototype.onClickSignoutButton = function() {
      return App.userInfoManager.signout();
    };

    ActionBar.prototype.onClickHelpButton = function() {
      return App.yatodo.helpBox.show();
    };

    return ActionBar;

  })(Leaf.Widget);

  TodoList = (function(_super) {
    __extends(TodoList, _super);

    function TodoList() {
      TodoList.__super__.constructor.call(this, App.templates["todo-list"]);
      this.items = [];
      this.data = null;
      this.scroller = new CustomScroller();
      this.scroller.attachTo(this.node);
      this.resize();
    }

    TodoList.prototype.set = function(data) {
      var todoInfo, _i, _len, _ref;

      this.clear();
      this.data = data;
      _ref = this.data.todos;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        todoInfo = _ref[_i];
        this.addItem(new TodoListItem(todoInfo));
      }
      if (this.items.length > 0) {
        this.items[0].focus();
      }
      return this.reorder();
    };

    TodoList.prototype.resize = function() {
      this.node$.css({
        height: $(".todo-list-container").height() - 48
      });
      return this.scroller.resize();
    };

    TodoList.prototype.clear = function() {
      var item, _i, _len, _ref;

      this.data = null;
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        item.remove();
      }
      return this.items.length = 0;
    };

    TodoList.prototype.toData = function() {
      var todo, todos, _i, _len, _ref;

      if (!this.data) {
        return null;
      }
      todos = [];
      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        todo = _ref[_i];
        todos.push(todo.toData());
      }
      return {
        name: this.data.name,
        todos: todos,
        timestamp: this.data.timestamp
      };
    };

    TodoList.prototype.deleteFocus = function() {
      var nextFocus;

      if (!this.currentFocusItem) {
        return false;
      }
      if (this.items.length !== 1) {
        nextFocus = this.nextItem(this.currentFocusItem) || this.previousItem(this.currentFocusItem);
      } else {
        nextFocus = null;
      }
      this.deleteItem(this.currentFocusItem);
      if (nextFocus && (nextFocus !== this.currentFocusItem)) {
        nextFocus.focus();
      } else {
        this.currentFocusItem = null;
      }
      return this.reorder();
    };

    TodoList.prototype.deleteDone = function() {
      var dones, item, _i, _len;

      dones = this.items.filter(function(item) {
        return item.data.done;
      });
      for (_i = 0, _len = dones.length; _i < _len; _i++) {
        item = dones[_i];
        this.deleteItem(item);
      }
      if (this.items[0]) {
        return this.items[0].focus();
      }
    };

    TodoList.prototype.deleteItem = function(item) {
      this.removeItem(item);
      return this.emit("change", "delete", item);
    };

    TodoList.prototype.createNewItem = function() {
      var index, newItem;

      newItem = new TodoListItem();
      this.bindItem(newItem);
      index = this.indexOfItem(this.currentFocusItem);
      if (index > 0) {
        this.insertItem(newItem, index);
      } else {
        this.insertItem(newItem, 0);
      }
      newItem.focus();
      return newItem.startEdit();
    };

    TodoList.prototype.createNewItemBelow = function() {
      var index, newItem;

      newItem = new TodoListItem();
      this.bindItem(newItem);
      index = this.indexOfItem(this.currentFocusItem);
      if (index > 0) {
        this.insertItem(newItem, index + 1);
      } else {
        this.insertItem(newItem, 1);
      }
      newItem.focus();
      return newItem.startEdit();
    };

    TodoList.prototype.addItem = function(item) {
      this.bindItem(item);
      return this.appendItem(item);
    };

    TodoList.prototype.bindItem = function(item) {
      var _this = this;

      TodoList.__super__.bindItem.call(this, item);
      item.on("focus", function() {
        return _this.scrollToSeeItem(item);
      });
      return item.on("change", function() {
        var args;

        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        args.splice(0, 0, "change");
        return _this.emit.apply(_this, args);
      });
    };

    TodoList.prototype.appendItem = function(item) {
      var result;

      result = TodoList.__super__.appendItem.call(this, item);
      item.appendTo(this.node);
      this.reorder();
      return result;
    };

    TodoList.prototype.removeItem = function(item) {
      var result;

      result = TodoList.__super__.removeItem.call(this, item);
      this.reorder();
      return result;
    };

    TodoList.prototype.insertItem = function(item, index) {
      var result;

      result = TodoList.__super__.insertItem.call(this, item, index);
      this.reorder();
      return result;
    };

    TodoList.prototype.reorder = function() {
      var _this = this;

      return setTimeout((function() {
        var border, item, step, top, _i, _len, _ref;

        if (_this.items.length === 0) {
          return;
        }
        top = 1;
        border = 1;
        step = _this.items[0].node$.height() + border;
        _ref = _this.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.node$.css({
            top: top
          });
          top += step;
        }
        return _this.scroller.resize();
      }), 0);
    };

    TodoList.prototype.scrollToSeeItem = function(todo) {
      var extraScroll, index, item, todoBottom, todoHeight, todoIndex, todoTop, viewableBottom, viewableTop, _i, _len, _ref;

      todoIndex = -1;
      _ref = this.items;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        item = _ref[index];
        if (item === todo) {
          todoIndex = index;
        }
      }
      console.assert(todoIndex !== -1);
      todoHeight = todo.$node.height() + 1;
      todoTop = todoIndex * todoHeight + 1;
      todoBottom = todoTop + todoHeight;
      viewableTop = this.node.scrollTop;
      viewableBottom = viewableTop + this.node$.height();
      extraScroll = 20;
      if (todoBottom > viewableBottom) {
        this.node.scrollTop += todoTop - viewableBottom + todoHeight + extraScroll;
        return true;
      }
      if (todoTop < viewableTop) {
        this.node.scrollTop -= viewableTop - todoBottom + todoHeight + extraScroll;
        return true;
      }
    };

    TodoList.prototype.moveFocusToNext = function() {
      var index;

      if (!this.currentFocusItem) {
        return;
      }
      index = this.indexOfItem(this.currentFocusItem) + 1;
      this.removeItem(this.currentFocusItem);
      this.insertItem(this.currentFocusItem, index);
      return this.emit("change", "reorder");
    };

    TodoList.prototype.moveFocusToPrevious = function() {
      var index;

      if (!this.currentFocusItem) {
        return;
      }
      index = this.indexOfItem(this.currentFocusItem) - 1;
      this.removeItem(this.currentFocusItem);
      this.insertItem(this.currentFocusItem, index);
      return this.emit("change", "reorder");
    };

    TodoList.prototype.toggleCurrentFocus = function() {
      if (this.currentFocusItem) {
        return this.currentFocusItem.onClickDoneCheckbox();
      }
    };

    TodoList.prototype.moveDoneToBottom = function() {
      var dones, item, _i, _len;

      dones = this.items.filter(function(item) {
        return item.data.done;
      });
      if (dones.length === 0) {
        return;
      }
      for (_i = 0, _len = dones.length; _i < _len; _i++) {
        item = dones[_i];
        this.removeItem(item);
        this.insertItem(item, this.items.length);
      }
      return this.emit("change", "reorder");
    };

    return TodoList;

  })(FocusList);

  TodoListItem = (function(_super) {
    __extends(TodoListItem, _super);

    function TodoListItem(data) {
      var _this = this;

      TodoListItem.__super__.constructor.call(this, App.templates["todo-list-item"]);
      this.defaultName = "";
      this.nonameHolder = "no name";
      this.originalData = data || {
        timestamp: Date.now(),
        name: this.defaultName,
        description: "",
        id: Date.now().toString() + Math.floor((Math.random() + 1) * 100000).toString()
      };
      this.data = Leaf.Util.clone(this.originalData);
      this.render();
      this.km = new Leaf.KeyEventManager();
      this.km.attachTo(window);
      this.km.on("keydown", function(e) {
        if (_this.isEdit && e.which === Leaf.Key.enter || e.which === Leaf.Key.escape) {
          _this.endEdit();
          e.capture();
        }
      });
    }

    TodoListItem.prototype.unfocus = function() {
      this.endEdit();
      return TodoListItem.__super__.unfocus.call(this);
    };

    TodoListItem.prototype.toData = function() {
      if (Leaf.Util.compare(this.data, this.originalData)) {
        return this.data;
      }
      this.data.timestamp = Date.now();
      return this.data;
    };

    TodoListItem.prototype.render = function() {
      this.UI.$todoName.text(this.data.name || this.nonameHolder);
      this.UI.$todoDescriptionSummery.text(this.data.description || "");
      if (this.data.done) {
        return this.done();
      } else {
        return this.undone();
      }
    };

    TodoListItem.prototype.done = function() {
      if (this.isEdit) {
        return false;
      }
      this.$node.addClass("done");
      this.UI.$doneCheckbox.addClass("icon-ok");
      if (!this.data.done) {
        this.data.done = true;
        this.emit("change", "done", this);
        return true;
      }
      return false;
    };

    TodoListItem.prototype.undone = function() {
      if (this.isEdit) {
        return false;
      }
      this.$node.removeClass("done");
      this.UI.$doneCheckbox.removeClass("icon-ok");
      if (this.data.done) {
        delete this.data.done;
        this.emit("change", "undone", this);
        return true;
      }
      return false;
    };

    TodoListItem.prototype.onMouseoverNode = function() {
      return this.focus();
    };

    TodoListItem.prototype.onClickDoneCheckbox = function() {
      if (this.data.done) {
        return this.undone();
      } else {
        return this.done();
      }
    };

    TodoListItem.prototype.onClickTodoName = function() {
      return this.startEdit();
    };

    TodoListItem.prototype.onBlurTodoNameInput = function() {
      return this.endEdit();
    };

    TodoListItem.prototype.onKeydownTodoNameInput = function(e) {};

    TodoListItem.prototype.toDetail = function() {
      if (!this.isDetail) {
        this.$node.addClass("detailed");
        this.emit("detail");
        return this.isDetail = true;
      }
    };

    TodoListItem.prototype.unDetail = function() {
      if (this.isDetail) {
        this.$node.removeClass("detailed");
        return this.isDetail = false;
      }
    };

    TodoListItem.prototype.startEdit = function() {
      if (this.data.done) {
        return;
      }
      if (!this.isEdit) {
        this.isEdit = true;
      } else {
        return;
      }
      this.km.master();
      this.UI.$todoName.hide();
      this.UI.$todoNameInput.show();
      this.UI.$todoNameInput.val(this.data.name);
      return this.UI.$todoNameInput.focus();
    };

    TodoListItem.prototype.endEdit = function() {
      var newName;

      if (this.isEdit) {
        this.isEdit = false;
      } else {
        return;
      }
      this.km.unmaster();
      this.UI.$todoName.show();
      this.UI.$todoNameInput.hide();
      newName = this.UI.$todoNameInput.val();
      if (!newName) {
        newName = this.defaultName;
      }
      if (newName !== this.data.name) {
        this.data.name = newName;
        this.emit("change");
        return this.render();
      }
    };

    TodoListItem.prototype.getCaretPosition = function() {
      return window.getSelection().getRangeAt().startOffset;
    };

    return TodoListItem;

  })(FocusListItem);

  FadeBox = (function(_super) {
    __extends(FadeBox, _super);

    function FadeBox(template) {
      FadeBox.__super__.constructor.call(this, template);
      this.isShown = false;
    }

    FadeBox.prototype.show = function() {
      if (this.isShown) {
        return;
      }
      this.isShown = true;
      this.node$.fadeIn();
      return $(".solid-content").addClass("blur");
    };

    FadeBox.prototype.hide = function() {
      if (!this.isShown) {
        return;
      }
      this.isShown = false;
      this.node$.fadeOut();
      return $(".solid-content").removeClass("blur");
    };

    return FadeBox;

  })(Leaf.Widget);

  window.FadeBox = FadeBox;

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
